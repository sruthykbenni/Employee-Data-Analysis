# -*- coding: utf-8 -*-
"""IRP_14_2_25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yFKyOjV3C9MwZEC1GtW6-qOMcMrX5pJ0
"""

import csv

with open("/content/emp_data_v2.csv", mode='r', newline='') as file:
  csv_reader = csv.reader(file)  #csv as list of lists
  data= [row for row in csv_reader]

print(data)

"""checking for missing values"""

missing_found = False
for i, row in enumerate(data):
  for j, value in enumerate(row):
    if value =='':
      print(f"Missing value in row {i+1}, column {j+1}")
      missing_found = True
if not missing_found:
  print("No missing values found")

"""check for duplicate values"""

duplicates_found = False
seen_rows = set()

for i, row in enumerate(data):
  if tuple(row) in seen_rows:
    print(f"Duplicate row found in row {i+1}")
    duplicates_found = True
  else:
    seen_rows.add(tuple(row))
if not duplicates_found:
  print("No duplicate rows found")

"""check for outliers"""

outliers_found = False

numerical_columns = [3]   #skip header

for col_idx in numerical_columns:
  values = [float(row[col_idx]) for row in data[1:] if row[col_idx] != '' and row[col_idx] is not None]

  if len(values)<1:
    continue
#sort values to find Q1 and Q3
  sorted_values= sorted(values)

  n= len(sorted_values)
  q1_index= int(n*0.25)
  q3_index= int(n*0.75)

  q1= sorted_values[q1_index]
  q3= sorted_values[q3_index]

#calculate IQR
  iqr= q3-q1

#check for outliers
  lower_bound= q1-1.5*iqr
  upper_bound= q3+1.5*iqr

  for i, value in enumerate(values):
    if value < lower_bound or value > upper_bound:
      print(f"Outlier found in column '{col}' at value {value}, row {i+1}")
      outliers_found = True

if not outliers_found:
  print("No outliers found")

"""Average salary of the employees"""

salary_column_idx = 3
#initialize variables to calculate the sum and count
total_salary = 0
employee_count = 0

#loop through each row (skip the header by starting at index 1)
for row in data[1:]:  # Starting from the second row (index 1)
    if row[salary_column_idx] != '' and row[salary_column_idx] is not None:
        total_salary += float(row[salary_column_idx])  # Add salary to the total
        employee_count += 1  # Count the employee

#calculate the average salary
if employee_count > 0:
    average_salary = total_salary / employee_count
    print(f"The average salary is: {average_salary:.2f}")
else:
    print("No valid salary data found.")

"""Highest salary of the company"""

#define the column index for the salary
salary_column_idx = 3
#initialize a variable to keep track of the highest salary
highest_salary = 0
#loop through each row (skip the header by starting at index 1)
for row in data[1:]:
    if row[salary_column_idx] != '' and row[salary_column_idx] is not None:
        salary = float(row[salary_column_idx])
        if salary > highest_salary:
            highest_salary = salary

if highest_salary > 0:
    print(f"The highest salary in the company is: {highest_salary}")
else:
    print("No valid salary data found.")

"""Number of employees in each department"""

department_column_idx = 2
#create a dictionary to store the number of employees in each department
department_count = {}
#loop through each row
for row in data[1:]:  #starting from the second row (index 1)
    department = row[department_column_idx]

    if department in department_count:
        department_count[department] += 1
    else:
        department_count[department] = 1

for department, count in department_count.items():
    print(f"Department: {department}, Number of Employees: {count}")

"""employee with highest salary"""

name_column_idx = 1
salary_column_idx = 3

#initialize variables
highest_salary = 0
highest_salary_employee = ""

for row in data[1:]:
    if row[salary_column_idx] != '' and row[salary_column_idx] is not None:
        salary = float(row[salary_column_idx])

        #to check if this employee has the highest salary
        if salary > highest_salary:
            highest_salary = salary
            highest_salary_employee = row[name_column_idx]

if highest_salary_employee:
    print(f"The employee with the highest salary is: {highest_salary_employee}, with a salary of {highest_salary:.2f}")
else:
    print("No valid salary data found.")

"""Creating results.txt"""

results = []

#highest salary info
results.append(f"The employee with the highest salary is: {highest_salary_employee}, with a salary of {highest_salary:.2f}\n")

#department counts
results.append("\nNumber of Employees in Each Department:\n")
for department, count in department_count.items():
    results.append(f"Department: {department}, Number of Employees: {count}\n")

#writing the results to a new text file called 'results.txt'
with open('results.txt', mode='w') as result_file:
    result_file.writelines(results)

print("Results have been written to 'results.txt'")